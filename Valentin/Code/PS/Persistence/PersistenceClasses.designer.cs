#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PS.Persistence
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="master")]
	public partial class PersistenceClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertHistoricalReservation(HistoricalReservation instance);
    partial void UpdateHistoricalReservation(HistoricalReservation instance);
    partial void DeleteHistoricalReservation(HistoricalReservation instance);
    partial void InsertHistoricalDiagnosis(HistoricalDiagnosis instance);
    partial void UpdateHistoricalDiagnosis(HistoricalDiagnosis instance);
    partial void DeleteHistoricalDiagnosis(HistoricalDiagnosis instance);
    partial void InsertHistoricalVisit(HistoricalVisit instance);
    partial void UpdateHistoricalVisit(HistoricalVisit instance);
    partial void DeleteHistoricalVisit(HistoricalVisit instance);
    partial void InsertHospital(Hospital instance);
    partial void UpdateHospital(Hospital instance);
    partial void DeleteHospital(Hospital instance);
    partial void InsertHospitalDoctor(HospitalDoctor instance);
    partial void UpdateHospitalDoctor(HospitalDoctor instance);
    partial void DeleteHospitalDoctor(HospitalDoctor instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertSysUser(SysUser instance);
    partial void UpdateSysUser(SysUser instance);
    partial void DeleteSysUser(SysUser instance);
    partial void InsertSysUserRole(SysUserRole instance);
    partial void UpdateSysUserRole(SysUserRole instance);
    partial void DeleteSysUserRole(SysUserRole instance);
    #endregion
		
		public PersistenceClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["masterConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PersistenceClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PersistenceClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PersistenceClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PersistenceClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<HistoricalReservation> HistoricalReservations
		{
			get
			{
				return this.GetTable<HistoricalReservation>();
			}
		}
		
		public System.Data.Linq.Table<HistoricalDiagnosis> HistoricalDiagnosis
		{
			get
			{
				return this.GetTable<HistoricalDiagnosis>();
			}
		}
		
		public System.Data.Linq.Table<HistoricalVisit> HistoricalVisits
		{
			get
			{
				return this.GetTable<HistoricalVisit>();
			}
		}
		
		public System.Data.Linq.Table<Hospital> Hospitals
		{
			get
			{
				return this.GetTable<Hospital>();
			}
		}
		
		public System.Data.Linq.Table<HospitalDoctor> HospitalDoctors
		{
			get
			{
				return this.GetTable<HospitalDoctor>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<SysUser> SysUsers
		{
			get
			{
				return this.GetTable<SysUser>();
			}
		}
		
		public System.Data.Linq.Table<SysUserRole> SysUserRoles
		{
			get
			{
				return this.GetTable<SysUserRole>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _MiddleName;
		
		private string _FamilyName;
		
		private string _Egn;
		
		private string _Address;
		
		private string _MobilePhone;
		
		private string _Specialization;
		
		private System.Guid _UserId;
		
		private EntitySet<HistoricalReservation> _HistoricalReservations;
		
		private EntitySet<HistoricalDiagnosis> _HistoricalDiagnosis;
		
		private EntitySet<HistoricalVisit> _HistoricalVisits;
		
		private EntitySet<HospitalDoctor> _HospitalDoctors;
		
		private EntityRef<SysUser> _SysUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnFamilyNameChanging(string value);
    partial void OnFamilyNameChanged();
    partial void OnEgnChanging(string value);
    partial void OnEgnChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnSpecializationChanging(string value);
    partial void OnSpecializationChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
		
		public Doctor()
		{
			this._HistoricalReservations = new EntitySet<HistoricalReservation>(new Action<HistoricalReservation>(this.attach_HistoricalReservations), new Action<HistoricalReservation>(this.detach_HistoricalReservations));
			this._HistoricalDiagnosis = new EntitySet<HistoricalDiagnosis>(new Action<HistoricalDiagnosis>(this.attach_HistoricalDiagnosis), new Action<HistoricalDiagnosis>(this.detach_HistoricalDiagnosis));
			this._HistoricalVisits = new EntitySet<HistoricalVisit>(new Action<HistoricalVisit>(this.attach_HistoricalVisits), new Action<HistoricalVisit>(this.detach_HistoricalVisits));
			this._HospitalDoctors = new EntitySet<HospitalDoctor>(new Action<HospitalDoctor>(this.attach_HospitalDoctors), new Action<HospitalDoctor>(this.detach_HospitalDoctors));
			this._SysUser = default(EntityRef<SysUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Guid
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string FamilyName
		{
			get
			{
				return this._FamilyName;
			}
			set
			{
				if ((this._FamilyName != value))
				{
					this.OnFamilyNameChanging(value);
					this.SendPropertyChanging();
					this._FamilyName = value;
					this.SendPropertyChanged("FamilyName");
					this.OnFamilyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Egn", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Egn
		{
			get
			{
				return this._Egn;
			}
			set
			{
				if ((this._Egn != value))
				{
					this.OnEgnChanging(value);
					this.SendPropertyChanging();
					this._Egn = value;
					this.SendPropertyChanged("Egn");
					this.OnEgnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specialization", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Specialization
		{
			get
			{
				return this._Specialization;
			}
			set
			{
				if ((this._Specialization != value))
				{
					this.OnSpecializationChanging(value);
					this.SendPropertyChanging();
					this._Specialization = value;
					this.SendPropertyChanged("Specialization");
					this.OnSpecializationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._SysUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_HistoricalReservation", Storage="_HistoricalReservations", ThisKey="Guid", OtherKey="DoctorId")]
		public EntitySet<HistoricalReservation> HistoricalReservations
		{
			get
			{
				return this._HistoricalReservations;
			}
			set
			{
				this._HistoricalReservations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_HistoricalDiagnosis", Storage="_HistoricalDiagnosis", ThisKey="Guid", OtherKey="DoctorId")]
		public EntitySet<HistoricalDiagnosis> HistoricalDiagnosis
		{
			get
			{
				return this._HistoricalDiagnosis;
			}
			set
			{
				this._HistoricalDiagnosis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_HistoricalVisit", Storage="_HistoricalVisits", ThisKey="Guid", OtherKey="DoctorId")]
		public EntitySet<HistoricalVisit> HistoricalVisits
		{
			get
			{
				return this._HistoricalVisits;
			}
			set
			{
				this._HistoricalVisits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_HospitalDoctor", Storage="_HospitalDoctors", ThisKey="Guid", OtherKey="DoctorId")]
		public EntitySet<HospitalDoctor> HospitalDoctors
		{
			get
			{
				return this._HospitalDoctors;
			}
			set
			{
				this._HospitalDoctors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysUser_Doctor", Storage="_SysUser", ThisKey="UserId", OtherKey="Guid", IsForeignKey=true)]
		public SysUser SysUser
		{
			get
			{
				return this._SysUser.Entity;
			}
			set
			{
				SysUser previousValue = this._SysUser.Entity;
				if (((previousValue != value) 
							|| (this._SysUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SysUser.Entity = null;
						previousValue.Doctors.Remove(this);
					}
					this._SysUser.Entity = value;
					if ((value != null))
					{
						value.Doctors.Add(this);
						this._UserId = value.Guid;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("SysUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HistoricalReservations(HistoricalReservation entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_HistoricalReservations(HistoricalReservation entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_HistoricalDiagnosis(HistoricalDiagnosis entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_HistoricalDiagnosis(HistoricalDiagnosis entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_HistoricalVisits(HistoricalVisit entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_HistoricalVisits(HistoricalVisit entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_HospitalDoctors(HospitalDoctor entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_HospitalDoctors(HospitalDoctor entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistoricalReservation")]
	public partial class HistoricalReservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PatientId;
		
		private System.Guid _HospitalId;
		
		private System.Guid _DoctorId;
		
		private System.DateTime _ReservationTime;
		
		private string _Reason;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Hospital> _Hospital;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnPatientIdChanging(System.Guid value);
    partial void OnPatientIdChanged();
    partial void OnHospitalIdChanging(System.Guid value);
    partial void OnHospitalIdChanged();
    partial void OnDoctorIdChanging(System.Guid value);
    partial void OnDoctorIdChanged();
    partial void OnReservationTimeChanging(System.DateTime value);
    partial void OnReservationTimeChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    #endregion
		
		public HistoricalReservation()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Hospital = default(EntityRef<Hospital>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Guid
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HospitalId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid HospitalId
		{
			get
			{
				return this._HospitalId;
			}
			set
			{
				if ((this._HospitalId != value))
				{
					if (this._Hospital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHospitalIdChanging(value);
					this.SendPropertyChanging();
					this._HospitalId = value;
					this.SendPropertyChanged("HospitalId");
					this.OnHospitalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIdChanging(value);
					this.SendPropertyChanging();
					this._DoctorId = value;
					this.SendPropertyChanged("DoctorId");
					this.OnDoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationTime", DbType="DateTime NOT NULL")]
		public System.DateTime ReservationTime
		{
			get
			{
				return this._ReservationTime;
			}
			set
			{
				if ((this._ReservationTime != value))
				{
					this.OnReservationTimeChanging(value);
					this.SendPropertyChanging();
					this._ReservationTime = value;
					this.SendPropertyChanged("ReservationTime");
					this.OnReservationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_HistoricalReservation", Storage="_Doctor", ThisKey="DoctorId", OtherKey="Guid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.HistoricalReservations.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.HistoricalReservations.Add(this);
						this._DoctorId = value.Guid;
					}
					else
					{
						this._DoctorId = default(System.Guid);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_HistoricalReservation", Storage="_Hospital", ThisKey="HospitalId", OtherKey="Guid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Hospital Hospital
		{
			get
			{
				return this._Hospital.Entity;
			}
			set
			{
				Hospital previousValue = this._Hospital.Entity;
				if (((previousValue != value) 
							|| (this._Hospital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hospital.Entity = null;
						previousValue.HistoricalReservations.Remove(this);
					}
					this._Hospital.Entity = value;
					if ((value != null))
					{
						value.HistoricalReservations.Add(this);
						this._HospitalId = value.Guid;
					}
					else
					{
						this._HospitalId = default(System.Guid);
					}
					this.SendPropertyChanged("Hospital");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_HistoricalReservation", Storage="_Patient", ThisKey="PatientId", OtherKey="Guid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.HistoricalReservations.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.HistoricalReservations.Add(this);
						this._PatientId = value.Guid;
					}
					else
					{
						this._PatientId = default(System.Guid);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistoricalPatientSickness")]
	public partial class HistoricalDiagnosis : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PatientId;
		
		private System.Guid _DoctorId;
		
		private string _SicknessDescription;
		
		private System.DateTime _DiagnosisTime;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnPatientIdChanging(System.Guid value);
    partial void OnPatientIdChanged();
    partial void OnDoctorIdChanging(System.Guid value);
    partial void OnDoctorIdChanged();
    partial void OnSicknessDescriptionChanging(string value);
    partial void OnSicknessDescriptionChanged();
    partial void OnDiagnosisTimeChanging(System.DateTime value);
    partial void OnDiagnosisTimeChanged();
    #endregion
		
		public HistoricalDiagnosis()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Guid
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIdChanging(value);
					this.SendPropertyChanging();
					this._DoctorId = value;
					this.SendPropertyChanged("DoctorId");
					this.OnDoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SicknessDescription", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SicknessDescription
		{
			get
			{
				return this._SicknessDescription;
			}
			set
			{
				if ((this._SicknessDescription != value))
				{
					this.OnSicknessDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SicknessDescription = value;
					this.SendPropertyChanged("SicknessDescription");
					this.OnSicknessDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiagnosisTime", DbType="DateTime NOT NULL")]
		public System.DateTime DiagnosisTime
		{
			get
			{
				return this._DiagnosisTime;
			}
			set
			{
				if ((this._DiagnosisTime != value))
				{
					this.OnDiagnosisTimeChanging(value);
					this.SendPropertyChanging();
					this._DiagnosisTime = value;
					this.SendPropertyChanged("DiagnosisTime");
					this.OnDiagnosisTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_HistoricalDiagnosis", Storage="_Doctor", ThisKey="DoctorId", OtherKey="Guid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.HistoricalDiagnosis.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.HistoricalDiagnosis.Add(this);
						this._DoctorId = value.Guid;
					}
					else
					{
						this._DoctorId = default(System.Guid);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_HistoricalDiagnosis", Storage="_Patient", ThisKey="PatientId", OtherKey="Guid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.HistoricalDiagnosis.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.HistoricalDiagnosis.Add(this);
						this._PatientId = value.Guid;
					}
					else
					{
						this._PatientId = default(System.Guid);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistoricalVisit")]
	public partial class HistoricalVisit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PatientId;
		
		private System.Guid _HospitalId;
		
		private System.Guid _DoctorId;
		
		private System.DateTime _VisitTime;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Hospital> _Hospital;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnPatientIdChanging(System.Guid value);
    partial void OnPatientIdChanged();
    partial void OnHospitalIdChanging(System.Guid value);
    partial void OnHospitalIdChanged();
    partial void OnDoctorIdChanging(System.Guid value);
    partial void OnDoctorIdChanged();
    partial void OnVisitTimeChanging(System.DateTime value);
    partial void OnVisitTimeChanged();
    #endregion
		
		public HistoricalVisit()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Hospital = default(EntityRef<Hospital>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Guid
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HospitalId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid HospitalId
		{
			get
			{
				return this._HospitalId;
			}
			set
			{
				if ((this._HospitalId != value))
				{
					if (this._Hospital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHospitalIdChanging(value);
					this.SendPropertyChanging();
					this._HospitalId = value;
					this.SendPropertyChanged("HospitalId");
					this.OnHospitalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIdChanging(value);
					this.SendPropertyChanging();
					this._DoctorId = value;
					this.SendPropertyChanged("DoctorId");
					this.OnDoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitTime", DbType="DateTime NOT NULL")]
		public System.DateTime VisitTime
		{
			get
			{
				return this._VisitTime;
			}
			set
			{
				if ((this._VisitTime != value))
				{
					this.OnVisitTimeChanging(value);
					this.SendPropertyChanging();
					this._VisitTime = value;
					this.SendPropertyChanged("VisitTime");
					this.OnVisitTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_HistoricalVisit", Storage="_Doctor", ThisKey="DoctorId", OtherKey="Guid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.HistoricalVisits.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.HistoricalVisits.Add(this);
						this._DoctorId = value.Guid;
					}
					else
					{
						this._DoctorId = default(System.Guid);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_HistoricalVisit", Storage="_Hospital", ThisKey="HospitalId", OtherKey="Guid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Hospital Hospital
		{
			get
			{
				return this._Hospital.Entity;
			}
			set
			{
				Hospital previousValue = this._Hospital.Entity;
				if (((previousValue != value) 
							|| (this._Hospital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hospital.Entity = null;
						previousValue.HistoricalVisits.Remove(this);
					}
					this._Hospital.Entity = value;
					if ((value != null))
					{
						value.HistoricalVisits.Add(this);
						this._HospitalId = value.Guid;
					}
					else
					{
						this._HospitalId = default(System.Guid);
					}
					this.SendPropertyChanged("Hospital");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_HistoricalVisit", Storage="_Patient", ThisKey="PatientId", OtherKey="Guid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.HistoricalVisits.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.HistoricalVisits.Add(this);
						this._PatientId = value.Guid;
					}
					else
					{
						this._PatientId = default(System.Guid);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hospital")]
	public partial class Hospital : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Address;
		
		private string _MobilePhone;
		
		private string _Owner;
		
		private System.Guid _UserId;
		
		private EntitySet<HistoricalReservation> _HistoricalReservations;
		
		private EntitySet<HistoricalVisit> _HistoricalVisits;
		
		private EntitySet<HospitalDoctor> _HospitalDoctors;
		
		private EntityRef<SysUser> _SysUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
		
		public Hospital()
		{
			this._HistoricalReservations = new EntitySet<HistoricalReservation>(new Action<HistoricalReservation>(this.attach_HistoricalReservations), new Action<HistoricalReservation>(this.detach_HistoricalReservations));
			this._HistoricalVisits = new EntitySet<HistoricalVisit>(new Action<HistoricalVisit>(this.attach_HistoricalVisits), new Action<HistoricalVisit>(this.detach_HistoricalVisits));
			this._HospitalDoctors = new EntitySet<HospitalDoctor>(new Action<HospitalDoctor>(this.attach_HospitalDoctors), new Action<HospitalDoctor>(this.detach_HospitalDoctors));
			this._SysUser = default(EntityRef<SysUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Guid
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owner", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._SysUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_HistoricalReservation", Storage="_HistoricalReservations", ThisKey="Guid", OtherKey="HospitalId")]
		public EntitySet<HistoricalReservation> HistoricalReservations
		{
			get
			{
				return this._HistoricalReservations;
			}
			set
			{
				this._HistoricalReservations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_HistoricalVisit", Storage="_HistoricalVisits", ThisKey="Guid", OtherKey="HospitalId")]
		public EntitySet<HistoricalVisit> HistoricalVisits
		{
			get
			{
				return this._HistoricalVisits;
			}
			set
			{
				this._HistoricalVisits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_HospitalDoctor", Storage="_HospitalDoctors", ThisKey="Guid", OtherKey="HospitalId")]
		public EntitySet<HospitalDoctor> HospitalDoctors
		{
			get
			{
				return this._HospitalDoctors;
			}
			set
			{
				this._HospitalDoctors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysUser_Hospital", Storage="_SysUser", ThisKey="UserId", OtherKey="Guid", IsForeignKey=true)]
		public SysUser SysUser
		{
			get
			{
				return this._SysUser.Entity;
			}
			set
			{
				SysUser previousValue = this._SysUser.Entity;
				if (((previousValue != value) 
							|| (this._SysUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SysUser.Entity = null;
						previousValue.Hospitals.Remove(this);
					}
					this._SysUser.Entity = value;
					if ((value != null))
					{
						value.Hospitals.Add(this);
						this._UserId = value.Guid;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("SysUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HistoricalReservations(HistoricalReservation entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = this;
		}
		
		private void detach_HistoricalReservations(HistoricalReservation entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = null;
		}
		
		private void attach_HistoricalVisits(HistoricalVisit entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = this;
		}
		
		private void detach_HistoricalVisits(HistoricalVisit entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = null;
		}
		
		private void attach_HospitalDoctors(HospitalDoctor entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = this;
		}
		
		private void detach_HospitalDoctors(HospitalDoctor entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HospitalDoctor")]
	public partial class HospitalDoctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _HospitalId;
		
		private System.Guid _DoctorId;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Hospital> _Hospital;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnHospitalIdChanging(System.Guid value);
    partial void OnHospitalIdChanged();
    partial void OnDoctorIdChanging(System.Guid value);
    partial void OnDoctorIdChanged();
    #endregion
		
		public HospitalDoctor()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Hospital = default(EntityRef<Hospital>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Guid
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HospitalId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid HospitalId
		{
			get
			{
				return this._HospitalId;
			}
			set
			{
				if ((this._HospitalId != value))
				{
					if (this._Hospital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHospitalIdChanging(value);
					this.SendPropertyChanging();
					this._HospitalId = value;
					this.SendPropertyChanged("HospitalId");
					this.OnHospitalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIdChanging(value);
					this.SendPropertyChanging();
					this._DoctorId = value;
					this.SendPropertyChanged("DoctorId");
					this.OnDoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_HospitalDoctor", Storage="_Doctor", ThisKey="DoctorId", OtherKey="Guid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.HospitalDoctors.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.HospitalDoctors.Add(this);
						this._DoctorId = value.Guid;
					}
					else
					{
						this._DoctorId = default(System.Guid);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_HospitalDoctor", Storage="_Hospital", ThisKey="HospitalId", OtherKey="Guid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Hospital Hospital
		{
			get
			{
				return this._Hospital.Entity;
			}
			set
			{
				Hospital previousValue = this._Hospital.Entity;
				if (((previousValue != value) 
							|| (this._Hospital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hospital.Entity = null;
						previousValue.HospitalDoctors.Remove(this);
					}
					this._Hospital.Entity = value;
					if ((value != null))
					{
						value.HospitalDoctors.Add(this);
						this._HospitalId = value.Guid;
					}
					else
					{
						this._HospitalId = default(System.Guid);
					}
					this.SendPropertyChanged("Hospital");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _MiddleName;
		
		private string _FamilyName;
		
		private string _Egn;
		
		private int _Age;
		
		private string _MobilePhone;
		
		private string _Address;
		
		private System.Guid _UserId;
		
		private EntitySet<HistoricalReservation> _HistoricalReservations;
		
		private EntitySet<HistoricalDiagnosis> _HistoricalDiagnosis;
		
		private EntitySet<HistoricalVisit> _HistoricalVisits;
		
		private EntityRef<SysUser> _SysUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnFamilyNameChanging(string value);
    partial void OnFamilyNameChanged();
    partial void OnEgnChanging(string value);
    partial void OnEgnChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
		
		public Patient()
		{
			this._HistoricalReservations = new EntitySet<HistoricalReservation>(new Action<HistoricalReservation>(this.attach_HistoricalReservations), new Action<HistoricalReservation>(this.detach_HistoricalReservations));
			this._HistoricalDiagnosis = new EntitySet<HistoricalDiagnosis>(new Action<HistoricalDiagnosis>(this.attach_HistoricalDiagnosis), new Action<HistoricalDiagnosis>(this.detach_HistoricalDiagnosis));
			this._HistoricalVisits = new EntitySet<HistoricalVisit>(new Action<HistoricalVisit>(this.attach_HistoricalVisits), new Action<HistoricalVisit>(this.detach_HistoricalVisits));
			this._SysUser = default(EntityRef<SysUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Guid
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string FamilyName
		{
			get
			{
				return this._FamilyName;
			}
			set
			{
				if ((this._FamilyName != value))
				{
					this.OnFamilyNameChanging(value);
					this.SendPropertyChanging();
					this._FamilyName = value;
					this.SendPropertyChanged("FamilyName");
					this.OnFamilyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Egn", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Egn
		{
			get
			{
				return this._Egn;
			}
			set
			{
				if ((this._Egn != value))
				{
					this.OnEgnChanging(value);
					this.SendPropertyChanging();
					this._Egn = value;
					this.SendPropertyChanged("Egn");
					this.OnEgnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._SysUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_HistoricalReservation", Storage="_HistoricalReservations", ThisKey="Guid", OtherKey="PatientId")]
		public EntitySet<HistoricalReservation> HistoricalReservations
		{
			get
			{
				return this._HistoricalReservations;
			}
			set
			{
				this._HistoricalReservations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_HistoricalDiagnosis", Storage="_HistoricalDiagnosis", ThisKey="Guid", OtherKey="PatientId")]
		public EntitySet<HistoricalDiagnosis> HistoricalDiagnosis
		{
			get
			{
				return this._HistoricalDiagnosis;
			}
			set
			{
				this._HistoricalDiagnosis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_HistoricalVisit", Storage="_HistoricalVisits", ThisKey="Guid", OtherKey="PatientId")]
		public EntitySet<HistoricalVisit> HistoricalVisits
		{
			get
			{
				return this._HistoricalVisits;
			}
			set
			{
				this._HistoricalVisits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysUser_Patient", Storage="_SysUser", ThisKey="UserId", OtherKey="Guid", IsForeignKey=true)]
		public SysUser SysUser
		{
			get
			{
				return this._SysUser.Entity;
			}
			set
			{
				SysUser previousValue = this._SysUser.Entity;
				if (((previousValue != value) 
							|| (this._SysUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SysUser.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._SysUser.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._UserId = value.Guid;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("SysUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HistoricalReservations(HistoricalReservation entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_HistoricalReservations(HistoricalReservation entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_HistoricalDiagnosis(HistoricalDiagnosis entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_HistoricalDiagnosis(HistoricalDiagnosis entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_HistoricalVisits(HistoricalVisit entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_HistoricalVisits(HistoricalVisit entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysUser")]
	public partial class SysUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Username;
		
		private string _Password;
		
		private System.DateTime _CreationDate;
		
		private int _RoleId;
		
		private EntitySet<Doctor> _Doctors;
		
		private EntitySet<Hospital> _Hospitals;
		
		private EntitySet<Patient> _Patients;
		
		private EntityRef<SysUserRole> _SysUserRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public SysUser()
		{
			this._Doctors = new EntitySet<Doctor>(new Action<Doctor>(this.attach_Doctors), new Action<Doctor>(this.detach_Doctors));
			this._Hospitals = new EntitySet<Hospital>(new Action<Hospital>(this.attach_Hospitals), new Action<Hospital>(this.detach_Hospitals));
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._SysUserRole = default(EntityRef<SysUserRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Guid
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="Date NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._SysUserRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysUser_Doctor", Storage="_Doctors", ThisKey="Guid", OtherKey="UserId")]
		public EntitySet<Doctor> Doctors
		{
			get
			{
				return this._Doctors;
			}
			set
			{
				this._Doctors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysUser_Hospital", Storage="_Hospitals", ThisKey="Guid", OtherKey="UserId")]
		public EntitySet<Hospital> Hospitals
		{
			get
			{
				return this._Hospitals;
			}
			set
			{
				this._Hospitals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysUser_Patient", Storage="_Patients", ThisKey="Guid", OtherKey="UserId")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysUserRole_SysUser", Storage="_SysUserRole", ThisKey="RoleId", OtherKey="Guid", IsForeignKey=true)]
		public SysUserRole SysUserRole
		{
			get
			{
				return this._SysUserRole.Entity;
			}
			set
			{
				SysUserRole previousValue = this._SysUserRole.Entity;
				if (((previousValue != value) 
							|| (this._SysUserRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SysUserRole.Entity = null;
						previousValue.SysUsers.Remove(this);
					}
					this._SysUserRole.Entity = value;
					if ((value != null))
					{
						value.SysUsers.Add(this);
						this._RoleId = value.Guid;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("SysUserRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.SysUser = this;
		}
		
		private void detach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.SysUser = null;
		}
		
		private void attach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.SysUser = this;
		}
		
		private void detach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.SysUser = null;
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.SysUser = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.SysUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysUserRole")]
	public partial class SysUserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<SysUser> _SysUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuidChanging(int value);
    partial void OnGuidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SysUserRole()
		{
			this._SysUsers = new EntitySet<SysUser>(new Action<SysUser>(this.attach_SysUsers), new Action<SysUser>(this.detach_SysUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Guid
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysUserRole_SysUser", Storage="_SysUsers", ThisKey="Guid", OtherKey="RoleId")]
		public EntitySet<SysUser> SysUsers
		{
			get
			{
				return this._SysUsers;
			}
			set
			{
				this._SysUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SysUsers(SysUser entity)
		{
			this.SendPropertyChanging();
			entity.SysUserRole = this;
		}
		
		private void detach_SysUsers(SysUser entity)
		{
			this.SendPropertyChanging();
			entity.SysUserRole = null;
		}
	}
}
#pragma warning restore 1591
